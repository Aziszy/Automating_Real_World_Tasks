#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails
import os


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
        car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

    Returns a list of lines that summarize the information.
    """
    max_sales = 0
    popular_year = 0
    year_total_sales_popular = 0
    max_revenue = {"revenue": 0}
    count_of_sales = list()
    car_max_sales = dict()
    year_total_sales = dict()

    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item

        # TODO: also handle max sales
        count_of_sales.append(item["total_sales"])
        count_of_sales.sort(reverse=True)
        max_sales = count_of_sales[0]
        if item["total_sales"] == max_sales:
            car_max_sales = item["car"]

        # TODO: also handle most popular car_year
        year_total_sales[item["car"]["car_year"]] = year_total_sales.get(
            item["car"]["car_year"], 0) + item["total_sales"]
        year_total_sales = dict(
            sorted(year_total_sales.items(), key=lambda x: x[1], reverse=True))
        year_total_sales_list = list(year_total_sales.items())
        popular_year, year_total_sales_popular = year_total_sales_list[0]

    summary = [
        "The {} generated the most revenue: ${}".format(
            format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(
            format_car(car_max_sales), max_sales),
        "The most popular year was {} with {} sales.".format(
            popular_year, year_total_sales_popular),
    ]
    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]),
                          item["price"], item["total_sales"]])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    data_table = cars_dict_to_table(data)
    fix_summary = "<br/>".join(summary)

    # TODO: turn this into a PDF report
    reports.generate(
        '/tmp/cars.pdf', 'Sales summary for last month', fix_summary, data_table)

    # TODO: send the PDF report as an email attachment
    sender = "automation@example.com"
    receiver = "{}@example.com".format(os.environ.get('USER'))
    subject = "Sales summary for last month"
    body = "\n".join(summary)

    message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
    emails.send(message)


if __name__ == "__main__":
    main(sys.argv)
